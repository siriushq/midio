//go:build ignore
// +build ignore

package main

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"
)

func commit() string {
	cmd := exec.Command("git", "rev-parse", "HEAD")
	output, err := cmd.Output()
	if err != nil {
		log.Fatalf("Failed to get git commit SHA: %v", err)
	}
	return strings.TrimSpace(string(output))
}

func version() string {
	return time.Now().UTC().Format(time.RFC3339)
}

func releaseTag(version string) string {
	tag := strings.ReplaceAll(version, ":", "-")
	return "RELEASE." + tag
}

func main() {
	GOPATH := filepath.ToSlash(os.Getenv("GOPATH"))
	GOROOT := filepath.ToSlash(os.Getenv("GOROOT"))
	Version := version()
	ReleaseTag := releaseTag(Version)
	CommitID := commit()
	ShortCommitID := CommitID[:12]

	content := fmt.Sprintf(`
package cmd

// This file is generated by main_build.go; DO NOT EDIT.

var (
	// GOPATH - GOPATH value at the time of build.
	GOPATH = "%s"

	// GOROOT - GOROOT value at the time of build.
	GOROOT = "%s"

	// Version - version time.RFC3339.
	Version = "%s"

	// ReleaseTag - release tag in TAG.%%Y-%%m-%%dT%%H-%%M-%%SZ.
	ReleaseTag = "%s"

	// CommitID - latest commit id.
	CommitID = "%s"

	// ShortCommitID - first 12 characters from CommitID.
	ShortCommitID = "%s"
)
		`,
		GOPATH,
		GOROOT,
		Version,
		ReleaseTag,
		CommitID,
		ShortCommitID,
	)

	path := filepath.Join("cmd", "build-constants.go")
	if err := os.WriteFile(path, []byte(content), 0644); err != nil {
		log.Fatalf("Failed to write %s: %v", path, err)
	}
}
